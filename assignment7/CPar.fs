// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | PREINC
  | PREDEC
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | COLON
  | QMARK
  | SWITCH
  | CASE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_PREINC
    | TOKEN_PREDEC
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_COLON
    | TOKEN_QMARK
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_Cases
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | NOT  -> 11 
  | SEQOR  -> 12 
  | SEQAND  -> 13 
  | PREINC  -> 14 
  | PREDEC  -> 15 
  | EQ  -> 16 
  | NE  -> 17 
  | GT  -> 18 
  | LT  -> 19 
  | GE  -> 20 
  | LE  -> 21 
  | PLUS  -> 22 
  | MINUS  -> 23 
  | TIMES  -> 24 
  | DIV  -> 25 
  | MOD  -> 26 
  | CHAR  -> 27 
  | ELSE  -> 28 
  | IF  -> 29 
  | INT  -> 30 
  | NULL  -> 31 
  | PRINT  -> 32 
  | PRINTLN  -> 33 
  | RETURN  -> 34 
  | VOID  -> 35 
  | WHILE  -> 36 
  | COLON  -> 37 
  | QMARK  -> 38 
  | SWITCH  -> 39 
  | CASE  -> 40 
  | CSTSTRING _ -> 41 
  | NAME _ -> 42 
  | CSTINT _ -> 43 
  | CSTBOOL _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_SEQOR 
  | 13 -> TOKEN_SEQAND 
  | 14 -> TOKEN_PREINC 
  | 15 -> TOKEN_PREDEC 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_NE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LT 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MINUS 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_MOD 
  | 27 -> TOKEN_CHAR 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_INT 
  | 31 -> TOKEN_NULL 
  | 32 -> TOKEN_PRINT 
  | 33 -> TOKEN_PRINTLN 
  | 34 -> TOKEN_RETURN 
  | 35 -> TOKEN_VOID 
  | 36 -> TOKEN_WHILE 
  | 37 -> TOKEN_COLON 
  | 38 -> TOKEN_QMARK 
  | 39 -> TOKEN_SWITCH 
  | 40 -> TOKEN_CASE 
  | 41 -> TOKEN_CSTSTRING 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTINT 
  | 44 -> TOKEN_CSTBOOL 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_Cases 
    | 32 -> NONTERM_Cases 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_StmtU 
    | 36 -> NONTERM_Expr 
    | 37 -> NONTERM_Expr 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_AtExprNotAccess 
    | 61 -> NONTERM_AtExprNotAccess 
    | 62 -> NONTERM_AtExprNotAccess 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Access 
    | 65 -> NONTERM_Access 
    | 66 -> NONTERM_Access 
    | 67 -> NONTERM_Access 
    | 68 -> NONTERM_Exprs 
    | 69 -> NONTERM_Exprs 
    | 70 -> NONTERM_Exprs1 
    | 71 -> NONTERM_Exprs1 
    | 72 -> NONTERM_Const 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Const 
    | 75 -> NONTERM_Const 
    | 76 -> NONTERM_Type 
    | 77 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | PREINC  -> "PREINC" 
  | PREDEC  -> "PREDEC" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | COLON  -> "COLON" 
  | QMARK  -> "QMARK" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | PREINC  -> (null : System.Object) 
  | PREDEC  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QMARK  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;4us;5us;2us;65535us;0us;4us;4us;4us;8us;65535us;0us;6us;4us;6us;25us;34us;29us;34us;35us;34us;37us;42us;40us;42us;43us;42us;4us;65535us;9us;11us;10us;11us;14us;15us;16us;17us;2us;65535us;0us;8us;4us;8us;2us;65535us;25us;26us;29us;30us;3us;65535us;25us;33us;29us;33us;35us;36us;10us;65535us;27us;28us;31us;32us;37us;54us;40us;54us;43us;54us;58us;54us;59us;54us;64us;54us;75us;54us;79us;80us;3us;65535us;37us;38us;40us;41us;43us;44us;5us;65535us;37us;40us;40us;40us;43us;40us;58us;82us;75us;76us;7us;65535us;37us;45us;40us;45us;43us;45us;58us;46us;59us;60us;64us;65us;75us;45us;1us;65535us;70us;71us;7us;65535us;37us;47us;40us;47us;43us;47us;58us;47us;59us;81us;64us;83us;75us;47us;35us;65535us;37us;48us;40us;48us;43us;48us;50us;52us;56us;57us;58us;48us;59us;48us;62us;63us;64us;48us;67us;68us;73us;74us;75us;48us;77us;78us;89us;90us;92us;117us;95us;96us;97us;98us;118us;100us;119us;101us;120us;102us;121us;103us;122us;104us;123us;105us;124us;106us;125us;107us;126us;108us;127us;109us;128us;110us;129us;111us;130us;112us;135us;114us;136us;115us;138us;113us;149us;116us;152us;117us;35us;65535us;37us;86us;40us;86us;43us;86us;50us;86us;56us;86us;58us;86us;59us;86us;62us;86us;64us;86us;67us;86us;73us;86us;75us;86us;77us;86us;89us;86us;92us;86us;95us;86us;97us;86us;118us;86us;119us;86us;120us;86us;121us;86us;122us;86us;123us;86us;124us;86us;125us;86us;126us;86us;127us;86us;128us;86us;129us;86us;130us;86us;135us;86us;136us;86us;138us;87us;149us;86us;152us;86us;36us;65535us;37us;88us;40us;88us;43us;88us;50us;88us;56us;88us;58us;88us;59us;88us;62us;88us;64us;88us;67us;88us;73us;88us;75us;88us;77us;88us;89us;88us;92us;88us;95us;88us;97us;88us;118us;88us;119us;88us;120us;88us;121us;88us;122us;88us;123us;88us;124us;88us;125us;88us;126us;88us;127us;88us;128us;88us;129us;88us;130us;88us;135us;88us;136us;88us;138us;88us;146us;148us;149us;88us;152us;88us;40us;65535us;37us;85us;40us;85us;43us;85us;50us;85us;56us;85us;58us;85us;59us;85us;62us;85us;64us;85us;67us;85us;73us;85us;75us;85us;77us;85us;89us;85us;92us;85us;95us;85us;97us;85us;118us;85us;119us;85us;120us;85us;121us;85us;122us;85us;123us;85us;124us;85us;125us;85us;126us;85us;127us;85us;128us;85us;129us;85us;130us;85us;131us;132us;133us;134us;135us;85us;136us;85us;138us;84us;140us;141us;143us;144us;146us;147us;149us;85us;152us;85us;1us;65535us;92us;93us;2us;65535us;92us;151us;152us;153us;36us;65535us;37us;137us;40us;137us;43us;137us;50us;137us;56us;137us;58us;137us;59us;137us;62us;137us;64us;137us;67us;137us;73us;137us;75us;137us;77us;137us;89us;137us;92us;137us;95us;137us;97us;137us;118us;137us;119us;137us;120us;137us;121us;137us;122us;137us;123us;137us;124us;137us;125us;137us;126us;137us;127us;137us;128us;137us;129us;137us;130us;137us;135us;137us;136us;137us;138us;137us;146us;137us;149us;137us;152us;137us;8us;65535us;0us;10us;4us;10us;25us;9us;29us;9us;35us;9us;37us;9us;40us;9us;43us;9us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;9us;18us;23us;26us;29us;33us;44us;48us;54us;62us;64us;72us;108us;144us;181us;222us;224us;227us;264us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;3us;1us;3us;1us;4us;1us;4us;1us;5us;1us;6us;2us;6us;13us;3us;6us;10us;11us;1us;7us;2us;7us;13us;1us;8us;3us;8us;10us;11us;1us;9us;3us;9us;10us;11us;1us;9us;2us;10us;11us;1us;10us;1us;11us;1us;11us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;13us;1us;13us;1us;13us;1us;13us;1us;15us;2us;16us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;20us;1us;20us;1us;21us;1us;21us;1us;21us;1us;22us;3us;22us;28us;33us;1us;23us;15us;24us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;24us;2us;25us;26us;1us;25us;15us;26us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;26us;1us;27us;3us;28us;33us;34us;3us;28us;33us;34us;17us;28us;33us;34us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;3us;28us;33us;34us;2us;28us;33us;1us;28us;2us;29us;35us;2us;29us;35us;16us;29us;35us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;2us;29us;35us;1us;29us;1us;30us;1us;30us;15us;30us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;30us;1us;30us;2us;30us;31us;1us;30us;1us;31us;15us;31us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;31us;1us;31us;1us;32us;15us;32us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;32us;1us;32us;1us;33us;1us;34us;1us;35us;4us;36us;39us;64us;67us;3us;36us;39us;67us;1us;37us;2us;37us;61us;1us;38us;1us;39us;15us;39us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;2us;40us;63us;1us;40us;1us;40us;1us;40us;1us;41us;15us;41us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;42us;15us;42us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;1us;43us;15us;44us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;56us;59us;14us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;59us;15us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;67us;16us;44us;45us;46us;47us;48us;49us;50us;51us;52us;53us;54us;55us;56us;59us;70us;71us;1us;44us;1us;45us;1us;46us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;54us;1us;55us;1us;56us;1us;57us;2us;57us;67us;1us;58us;2us;58us;67us;1us;59us;1us;59us;1us;60us;2us;61us;64us;1us;61us;1us;62us;2us;62us;67us;1us;63us;1us;64us;2us;64us;67us;1us;64us;2us;65us;66us;2us;65us;67us;1us;66us;1us;67us;1us;67us;1us;69us;1us;71us;1us;71us;1us;72us;1us;73us;1us;74us;1us;74us;1us;75us;1us;76us;1us;77us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;23us;27us;29us;32us;34us;38us;40us;44us;46us;49us;51us;53us;55us;57us;59us;61us;63us;65us;67us;69us;71us;73us;75us;77us;80us;82us;84us;86us;88us;90us;92us;94us;96us;98us;100us;102us;106us;108us;124us;126us;129us;131us;147us;149us;151us;155us;159us;177us;181us;184us;186us;189us;192us;209us;212us;214us;216us;218us;234us;236us;238us;241us;243us;245us;261us;263us;265us;267us;283us;285us;287us;289us;291us;293us;298us;302us;304us;307us;309us;311us;327us;330us;332us;334us;336us;338us;354us;356us;372us;374us;390us;406us;422us;438us;454us;470us;486us;502us;518us;534us;550us;566us;582us;597us;613us;629us;645us;662us;664us;666us;668us;670us;672us;674us;676us;678us;680us;682us;684us;686us;688us;690us;693us;695us;698us;700us;702us;704us;707us;709us;711us;714us;716us;718us;721us;723us;726us;729us;731us;733us;735us;737us;739us;741us;743us;745us;747us;749us;751us;753us;|]
let _fsyacc_action_rows = 161
let _fsyacc_actionTableElements = [|3us;16386us;27us;160us;30us;159us;35us;23us;0us;49152us;1us;32768us;0us;3us;0us;16385us;3us;16386us;27us;160us;30us;159us;35us;23us;0us;16387us;1us;32768us;7us;7us;0us;16388us;0us;16389us;3us;32768us;1us;16us;24us;14us;42us;12us;3us;32768us;1us;16us;24us;14us;42us;13us;1us;16390us;5us;19us;0us;16391us;1us;16391us;1us;29us;3us;32768us;1us;16us;24us;14us;42us;12us;1us;16392us;5us;19us;3us;32768us;1us;16us;24us;14us;42us;12us;2us;32768us;2us;18us;5us;19us;0us;16393us;2us;32768us;6us;20us;43us;21us;0us;16394us;1us;32768us;6us;22us;0us;16395us;1us;32768us;42us;24us;1us;32768us;1us;25us;2us;16398us;27us;160us;30us;159us;1us;32768us;2us;27us;1us;32768us;3us;37us;0us;16396us;2us;16398us;27us;160us;30us;159us;1us;32768us;2us;31us;1us;32768us;3us;37us;0us;16397us;0us;16399us;1us;16400us;8us;35us;2us;32768us;27us;160us;30us;159us;0us;16401us;20us;16403us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;27us;160us;29us;55us;30us;159us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;1us;32768us;4us;39us;0us;16402us;20us;16403us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;27us;160us;29us;55us;30us;159us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;0us;16404us;1us;32768us;7us;43us;20us;16403us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;27us;160us;29us;55us;30us;159us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;0us;16405us;0us;16406us;1us;16406us;28us;59us;0us;16407us;15us;32768us;7us;49us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;0us;16408us;14us;32768us;1us;138us;7us;51us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;0us;16409us;15us;32768us;7us;53us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;0us;16410us;0us;16411us;1us;32768us;1us;56us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;15us;32768us;2us;58us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;18us;32768us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;29us;55us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;18us;32768us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;29us;55us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;0us;16412us;1us;32768us;1us;62us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;15us;32768us;2us;64us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;18us;32768us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;29us;55us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;0us;16413us;1us;32768us;1us;67us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;15us;32768us;2us;69us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;1us;32768us;3us;70us;1us;32768us;40us;77us;2us;32768us;4us;72us;40us;73us;0us;16414us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;15us;32768us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;37us;75us;38us;135us;18us;32768us;1us;138us;3us;37us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;29us;55us;31us;158us;32us;97us;33us;99us;34us;50us;36us;61us;39us;66us;42us;91us;43us;154us;44us;155us;0us;16415us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;15us;32768us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;37us;79us;38us;135us;1us;32768us;3us;37us;0us;16416us;0us;16417us;0us;16418us;0us;16419us;3us;16420us;2us;145us;5us;149us;9us;89us;2us;16420us;5us;149us;9us;89us;0us;16421us;1us;16421us;2us;139us;0us;16422us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;14us;16423us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;1us;16447us;1us;92us;13us;16452us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;1us;32768us;2us;94us;0us;16424us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;1us;16425us;38us;135us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;14us;16426us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;0us;16427us;4us;16428us;24us;120us;25us;121us;26us;122us;38us;135us;4us;16429us;24us;120us;25us;121us;26us;122us;38us;135us;1us;16430us;38us;135us;1us;16431us;38us;135us;1us;16432us;38us;135us;10us;16433us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;10us;16434us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;6us;16435us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;6us;16436us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;6us;16437us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;6us;16438us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;12us;16439us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;13us;16440us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;14us;32768us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;15us;32768us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;37us;136us;38us;135us;1us;16443us;38us;135us;15us;32768us;6us;150us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;15us;16454us;8us;152us;12us;130us;13us;129us;16us;123us;17us;124us;18us;125us;19us;126us;20us;127us;21us;128us;22us;118us;23us;119us;24us;120us;25us;121us;26us;122us;38us;135us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;3us;32768us;1us;143us;24us;146us;42us;142us;1us;16441us;5us;149us;3us;32768us;1us;143us;24us;146us;42us;142us;1us;16442us;5us;149us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;0us;16444us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;0us;16445us;3us;32768us;1us;143us;24us;146us;42us;142us;1us;16446us;5us;149us;0us;16447us;3us;32768us;1us;143us;24us;146us;42us;142us;2us;32768us;2us;145us;5us;149us;0us;16448us;8us;32768us;1us;138us;10us;140us;23us;156us;24us;146us;31us;158us;42us;142us;43us;154us;44us;155us;1us;16449us;5us;149us;0us;16450us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;0us;16451us;0us;16453us;13us;32768us;1us;138us;10us;140us;11us;95us;14us;131us;15us;133us;23us;156us;24us;146us;31us;158us;32us;97us;33us;99us;42us;91us;43us;154us;44us;155us;0us;16455us;0us;16456us;0us;16457us;1us;32768us;43us;157us;0us;16458us;0us;16459us;0us;16460us;0us;16461us;|]
let _fsyacc_actionTableRowOffsets = [|0us;4us;5us;7us;8us;12us;13us;15us;16us;17us;21us;25us;27us;28us;30us;34us;36us;40us;43us;44us;47us;48us;50us;51us;53us;55us;58us;60us;62us;63us;66us;68us;70us;71us;72us;74us;77us;78us;99us;101us;102us;123us;124us;126us;147us;148us;149us;151us;152us;168us;169us;184us;185us;201us;202us;203us;205us;219us;235us;254us;273us;274us;276us;290us;306us;325us;326us;328us;342us;358us;360us;362us;365us;366us;380us;396us;415us;416us;430us;446us;448us;449us;450us;451us;452us;456us;459us;460us;462us;463us;477us;492us;494us;508us;510us;511us;525us;527us;541us;556us;557us;562us;567us;569us;571us;573us;584us;595us;602us;609us;616us;623us;636us;650us;665us;681us;683us;699us;715us;729us;743us;757us;771us;785us;799us;813us;827us;841us;855us;869us;883us;897us;901us;903us;907us;909us;923us;937us;938us;952us;953us;957us;959us;960us;964us;967us;968us;977us;979us;980us;994us;995us;996us;1010us;1011us;1012us;1013us;1015us;1016us;1017us;1018us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;0us;2us;2us;1us;2us;1us;2us;3us;3us;4us;6us;6us;0us;1us;1us;3us;3us;0us;2us;3us;1us;1us;2us;2us;3us;1us;7us;5us;7us;5us;4us;7us;5us;5us;1us;1us;1us;3us;4us;2us;2us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;2us;5us;1us;3us;2us;1us;3us;2us;2us;4us;0us;1us;1us;3us;1us;1us;2us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;5us;5us;5us;5us;5us;6us;6us;7us;7us;8us;8us;9us;10us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;12us;13us;13us;14us;14us;14us;15us;15us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;16us;17us;17us;17us;18us;18us;18us;18us;18us;19us;19us;20us;20us;21us;21us;21us;21us;22us;22us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;16387us;65535us;16388us;16389us;65535us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;16394us;65535us;16395us;65535us;65535us;65535us;65535us;65535us;16396us;65535us;65535us;65535us;16397us;16399us;65535us;65535us;16401us;65535us;65535us;16402us;65535us;16404us;65535us;65535us;16405us;16406us;65535us;16407us;65535us;16408us;65535us;16409us;65535us;16410us;16411us;65535us;65535us;65535us;65535us;65535us;16412us;65535us;65535us;65535us;65535us;16413us;65535us;65535us;65535us;65535us;65535us;65535us;16414us;65535us;65535us;65535us;16415us;65535us;65535us;65535us;16416us;16417us;16418us;16419us;65535us;65535us;16421us;65535us;16422us;65535us;65535us;65535us;65535us;65535us;16424us;65535us;65535us;65535us;65535us;16427us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16444us;65535us;16445us;65535us;65535us;16447us;65535us;65535us;16448us;65535us;65535us;16450us;65535us;16451us;16453us;65535us;16455us;16456us;16457us;65535us;16458us;16459us;16460us;16461us;|]
let _fsyacc_reductions = lazy [|
# 437 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 446 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "CPar.fsy"
                                                               Prog _1 
                   )
# 41 "CPar.fsy"
                 : Absyn.program));
# 457 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CPar.fsy"
                                                               [] 
                   )
# 45 "CPar.fsy"
                 : 'gentype_Topdecs));
# 467 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdec in
            let _2 = parseState.GetInput(2) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 46 "CPar.fsy"
                 : 'gentype_Topdecs));
# 479 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 50 "CPar.fsy"
                 : 'gentype_Topdec));
# 490 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Fundec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CPar.fsy"
                                                               _1 
                   )
# 51 "CPar.fsy"
                 : 'gentype_Topdec));
# 501 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 55 "CPar.fsy"
                 : 'gentype_Vardec));
# 513 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 59 "CPar.fsy"
                 : 'gentype_Vardesc));
# 524 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 60 "CPar.fsy"
                 : 'gentype_Vardesc));
# 535 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CPar.fsy"
                                                               _2                                      
                   )
# 61 "CPar.fsy"
                 : 'gentype_Vardesc));
# 546 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 62 "CPar.fsy"
                 : 'gentype_Vardesc));
# 557 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 63 "CPar.fsy"
                 : 'gentype_Vardesc));
# 569 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 67 "CPar.fsy"
                 : 'gentype_Fundec));
# 582 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 68 "CPar.fsy"
                 : 'gentype_Fundec));
# 596 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               [] 
                   )
# 72 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 606 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CPar.fsy"
                                                               _1 
                   )
# 73 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 617 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               [_1]     
                   )
# 77 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 628 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 78 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 640 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               Block _2 
                   )
# 82 "CPar.fsy"
                 : 'gentype_Block));
# 651 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CPar.fsy"
                                                               [] 
                   )
# 86 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 661 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 87 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 673 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 88 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 685 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               _1 
                   )
# 92 "CPar.fsy"
                 : 'gentype_Stmt));
# 696 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CPar.fsy"
                                                               _1 
                   )
# 93 "CPar.fsy"
                 : 'gentype_Stmt));
# 707 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 97 "CPar.fsy"
                 : 'gentype_StmtM));
# 718 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CPar.fsy"
                                                               Return None          
                   )
# 98 "CPar.fsy"
                 : 'gentype_StmtM));
# 728 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 99 "CPar.fsy"
                 : 'gentype_StmtM));
# 739 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                               _1                   
                   )
# 100 "CPar.fsy"
                 : 'gentype_StmtM));
# 750 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 101 "CPar.fsy"
                 : 'gentype_StmtM));
# 763 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 102 "CPar.fsy"
                 : 'gentype_StmtM));
# 775 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Cases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                                     Switch(_3, _6) 
                   )
# 103 "CPar.fsy"
                 : 'gentype_StmtM));
# 787 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Cases in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                         (_3, _5)::_1 
                   )
# 107 "CPar.fsy"
                 : 'gentype_Cases));
# 800 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                          (_2, _4)::[] 
                   )
# 108 "CPar.fsy"
                 : 'gentype_Cases));
# 812 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 111 "CPar.fsy"
                 : 'gentype_StmtU));
# 825 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 112 "CPar.fsy"
                 : 'gentype_StmtU));
# 837 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 113 "CPar.fsy"
                 : 'gentype_StmtU));
# 849 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "CPar.fsy"
                                                               Access _1           
                   )
# 117 "CPar.fsy"
                 : 'gentype_Expr));
# 860 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "CPar.fsy"
                                                               _1                  
                   )
# 118 "CPar.fsy"
                 : 'gentype_Expr));
# 871 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                               _1                  
                   )
# 122 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 882 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 123 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 894 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 124 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 906 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 125 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 917 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 126 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 928 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 127 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 938 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 128 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 950 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 129 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 962 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 130 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 974 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 131 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 986 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 132 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 998 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 133 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1010 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 134 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1022 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 135 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1034 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 136 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1046 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 137 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1058 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 138 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1070 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 139 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1082 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 140 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1094 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               PreInc(_2)          
                   )
# 141 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1105 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               PreDec(_2)          
                   )
# 142 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1116 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Tern(_1, _3, _5 )      
                   )
# 143 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1129 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Const in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               CstI _1             
                   )
# 147 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1140 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               _2                  
                   )
# 148 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1151 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Addr _2             
                   )
# 149 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1162 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               AccVar _1           
                   )
# 153 "CPar.fsy"
                 : 'gentype_Access));
# 1173 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               _2                  
                   )
# 154 "CPar.fsy"
                 : 'gentype_Access));
# 1184 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 155 "CPar.fsy"
                 : 'gentype_Access));
# 1195 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 156 "CPar.fsy"
                 : 'gentype_Access));
# 1206 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 157 "CPar.fsy"
                 : 'gentype_Access));
# 1218 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               []       
                   )
# 161 "CPar.fsy"
                 : 'gentype_Exprs));
# 1228 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               _1       
                   )
# 162 "CPar.fsy"
                 : 'gentype_Exprs));
# 1239 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               [_1]     
                   )
# 166 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1250 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 167 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1262 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CPar.fsy"
                                                               _1       
                   )
# 171 "CPar.fsy"
                 : 'gentype_Const));
# 1273 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                               _1       
                   )
# 172 "CPar.fsy"
                 : 'gentype_Const));
# 1284 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               - _2     
                   )
# 173 "CPar.fsy"
                 : 'gentype_Const));
# 1295 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               -1       
                   )
# 174 "CPar.fsy"
                 : 'gentype_Const));
# 1305 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               TypI     
                   )
# 178 "CPar.fsy"
                 : 'gentype_Type));
# 1315 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               TypC     
                   )
# 179 "CPar.fsy"
                 : 'gentype_Type));
|]
# 1326 "CPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    engine lexer lexbuf 0 :?> _
